import chalk from 'chalk'

const log = console.log

const SETTING = `⚙️  Setting default config.`
const GIT_INITIALIZE = `You're not in a git repo, do you want to execute 'git init' now?`
const UPDATE_DEPENDENCIES = `Do you want to update the versions of all dependencies involved in this release?`
const UPDATE_DEPENDENCIES_DONE = `${chalk.green('All dependencies\' versions have been updated successfully.')}`
const GIT_INITIALIZING = `🗃  Initializing git repository...`
const COPYING = `©️  Copying template files...`
const INIT_HOOKS = `🪝  Initializing hooks...`
const INSTALLING = `📦  Installing dependencies. This might take a while...\n`
const ADDING = `📦  Adding dependencies. This might take a while...`
const UPDATING = `📦  Updating dependencies. This might take a while...`
const REMOVING = `📦  Removing dependencies. This might take a while...`
const BUILD_DONE = `\n ${chalk.green('🎉  Successfully build projects')}`
const INSTALL_DEPENDENCIES = `\n✨ Installing dependencies with pnpm. \n`
const HOOK_INIT = `\n${chalk.green('hooks initialized successfully.')}`
const SKIPPED_HOOK = `\n${chalk.yellow('skipped hooks init due to hooks existing locally.')}`
const CHOOSE_STAGED = `Choose staged files.`
const NO_COMMIT = `\n${chalk.red('There are no commits to push')}`
const UNSTAGED = `You have unstaged files (possibly generated by lint-staged). Please choose the files to be staged.`
const PACKAGE_MISSING = `Provided package name error, please check:
-- If the project exists in the workspace.
-- Execute the command in the script attribute of package.json or in the root directory where the command needs to be executed.
`
const CLEAN_WORKSPACE = 'Cannot execute in a clean working dir.'
const NOT_AVAILABLE_PATH = `You are currently not in the root or package directory.`
const INVALID_WORKSPACE_PATTERN = 'Invaild workspace pattern, please check you workspaces config.'
const PACKAGE_MANAGER_NOT_FOUND = `Package manager not found(one of npm, yarn, pnpm).`
const NOT_MONOREPO = `${chalk.red('Use this in a monorepo environment (multi-level monorepo not supported currently).')}`
const EMPTY_MONOREPO = `${chalk.red('Your monorepo has no packages, please launch it after adding one.')}`
const SHUTTING_DOWN = chalk.yellow(`\n now shutting down. To force exit, press ^C again. Please wait...`)
const SELECT_PACKAGE_MANAGER = 'Select a package manager for installing dependencies.'
const SELECT_PACKAGE_ROOT = `Please select the directory where you want to create the project.`
const SELECT_TEMPLATE = `Please select the template you want to use.`

const suggestions = (suggestion: string) => `  ${chalk.red(`Did you mean ${chalk.yellow(suggestion)}?`)}`
const unknown = (name: string) => `  ${chalk.red(`Unknown command ${chalk.yellow(name)}.`)}`
const detail = () => `  Run ${chalk.cyan(`mopo <command> --help`)} for detailed usage of given command.`
const missing = (argName: string) => `Missing required argument ${chalk.yellow(`<${argName}>`)}.`
const moreArguments = () => chalk.yellow('\n Info: You provided more than required arguments. The first one will be used as the app\'s name, the rest are ignored.')
const isGenerate = (isRepo: boolean) => `Generate ${isRepo ? 'repo' : 'project'} in current directory?`
const directoryExists = (name: string) => `Target directory ${chalk.cyan(name)} already exists. Are you sure to overwrite it?`
const creatingProject = (name: string) => `✨  Creating project in ${chalk.yellow(name)}.`
const starting = (name: string) => `✨  Starting project in ${chalk.yellow(name)}. \n`
const building = (name: string) => `✨  Building project in ${chalk.yellow(name)}.`
const createSuccess = (name: string) => `\n${chalk.green(`🎉  Successfully created project ${name}`)}`
const readPkgNameFail = (name: string) => `Reading package.json under ${name} failed`
const pkgChanged = (name: string) => `\npackage ${chalk.green(name)} changed`
const buildCMD = (name: string) => `\nbuilding with cmd: ${chalk.green(name)}`
const buildOutput = (name: string, message: string) => `\nbuild failed, page: ${name}, message:\n ${chalk.red(message)}\n`
const creatingRepo = (name: string) => `✨  Creating repo in ${chalk.yellow(name)}.`
const createRepoSuccess = (name: string) => `\n${chalk.green(`🎉  Successfully created repo ${name}`)}`

function getStarted(name: string) {
  return `👉  Get started with the following commands:\n\n${
    chalk.cyan(` ${chalk.gray('$')} mopo serve ${name}`)}`
}
function necessaryNodeVersion(wanted: string, id: string) {
  return chalk.red(
    `You are using Node ${process.version}, but this version of ${id
    } requires Node ${wanted}.\nPlease upgrade your Node version.`,
  )
}
function recommendedNodeVersion(major: string) {
  return chalk.red(
    `You are using Node ${process.version}.\n`
    + `Node.js ${major} has already reached end-of-life and will not be supported in future major releases.\n`
    + `It's strongly recommended to use an active LTS version instead.`,
  )
}
function invalidName(name: string, detail: string[] = []) {
  const msg = `${chalk.red(`Invalid project name: "${name}"`)}`
  if (detail.length !== 0)
    return `${msg}\n details:\n${detail.join('\n')}`
  return msg
}
function createSuggestion(name: string, isCurrent: boolean) {
  const prefix = chalk.gray('$')
  const create = `mopo create projectName`
  const msg = `👉  Get started with the following commands:\n\n`

  return `${msg + (isCurrent ? chalk.cyan(`${prefix} ${create}`) : chalk.cyan(`${prefix} cd ${name} & ${create}`))}\n`
}

export {
  ADDING,
  BUILD_DONE,
  buildCMD,
  building,
  buildOutput,
  CHOOSE_STAGED,
  CLEAN_WORKSPACE,
  COPYING,
  createRepoSuccess,
  createSuccess,
  createSuggestion,
  creatingProject,
  creatingRepo,
  detail,
  directoryExists,
  EMPTY_MONOREPO,
  getStarted,
  GIT_INITIALIZE,
  GIT_INITIALIZING,
  HOOK_INIT,
  INIT_HOOKS,
  INSTALL_DEPENDENCIES,
  INSTALLING,
  INVALID_WORKSPACE_PATTERN,
  invalidName,
  isGenerate,
  log,
  missing,
  moreArguments,
  necessaryNodeVersion,
  NO_COMMIT,
  NOT_AVAILABLE_PATH,
  NOT_MONOREPO,
  PACKAGE_MANAGER_NOT_FOUND,
  PACKAGE_MISSING,
  pkgChanged,
  readPkgNameFail,
  recommendedNodeVersion,
  REMOVING,
  SELECT_PACKAGE_MANAGER,
  SELECT_PACKAGE_ROOT,
  SELECT_TEMPLATE,
  SETTING,
  SHUTTING_DOWN,
  SKIPPED_HOOK,
  starting,
  suggestions,
  unknown,
  UNSTAGED,
  UPDATE_DEPENDENCIES,
  UPDATE_DEPENDENCIES_DONE,
  UPDATING,
}
